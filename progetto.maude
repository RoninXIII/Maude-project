
fmod GRID is
    protecting INT .
    protecting NAT .
    protecting STRING .
    protecting BOOL .
    sort Grid Place NumberToinsert  .
    subsort Place < Grid . 
    subsort Int < NumberToinsert  .
    
--- Empty indicates a cell that does not contains either numeric or string values
    op empty : -> Int [ctor format (b! o)] . 

--- Calculate a result given two numbers and an operation 
    op result : Int String Int -> Int [ format (r! o)] . 

--- A square can be of three types :
--- A square containing the number that will be part of an operation;     
    op sq : Nat Nat NumberToinsert -> Place [ format (r! o)] . 
--- a square containing the result of a row or a column    
    op sq : Nat Nat Nat -> Place [ format (r! o)] .
--- a sqaure containing an operation of kind "+", "*" or "-"    
    op sq : Nat Nat String -> Place [ format (r! o)] .

--- The number to place are from 1 to 9 (0 is the initial configuration)    
    op 0 1 2 3 4 5 6 7 8 9 : -> NumberToinsert [ctor ] .

--- A grid is thought as a sequence of squares .
    op __ : Grid Grid -> Grid  [ctor frozen assoc comm] . 

--- Change the given number in one another.
    op write : Int  -> Int . 
    
--- Check if a Row or a Column is valid (if contains two cells with the same number) .
    op isValid : Grid -> Bool . 

--- Check if the result of a Row or a Column is the one to reach .
    op isResult : Grid -> Bool . 

--- Initial grid.
    op initial : -> Grid  . 
    
    --- Row and Column coordinates
    vars I1 I2 I3 I4 J1 J2 J3 J4 : Nat . 
    
    vars N1 N2 N3 N4 : NumberToinsert .

    var G : Grid .
    
    --- Results
    var R R2 : Nat . 

    --- Operations
    var O O2 : String . 

    
--- The write equation change the value with is successor... until it raches the number 9 
    ceq write(N1) = 1
        if N1 == 0 .
    eq write(N1) = s(N1) [owise] .

    ceq write(N2) = 1
        if N2 == 0 .
    eq write(N2) = s(N2) [owise] .

    ceq write(N3) = 1
        if N3 == 0 .
    eq write(N3) = s(N3) [owise] .

    ceq write(N4) = 1
        if N4 == 0 .
    eq write(N4) = s(N4) [owise] .

    eq write(9) = 0 .
      

    --- Check if a row is valid, the G stands for the rest of the specified grid.
    --- N1 and N2 must be not equal to 0 because i don't want that to check the initial configuration,
    --- then the numbers must be not equal to R because i don't want that the case in which a number
    --- is equal to a result (ex. 2*1 = 2) is not valid.
    ceq isValid(sq(I1,J1,N1) sq(I1,J2,O) sq(I1,J3,N2) sq(I1,J4,R) G) = false 
        if (N1 == N2 and R =/= 1) /\ N1 =/= 0  /\ N2 =/= 0   .
   
    --- Check if a column is valid
    ceq isValid(sq(I1,J1,N1) sq(I2,J1,O) sq(I3,J1,N3) sq(I4,J1,R) G) = false 
        if (N1 == N3 and R =/= 1)  /\ N1 =/= 0  /\ N3 =/= 0  .      
    
    --- If none of the cases above is chosen the grid i valid
    eq isValid(G) = true [owise] .
    

--- The system must know that a particular string is an operation of certain type.    
   eq result(N1,"+",N2) = N1 + N2 .
   eq result(N1,"*",N2) = N1 * N2 .
   eq result(N1,"-",N2) = sd(N1,N2) .
   

  
    ceq isResult(sq(I1,J1,N1) sq(I1,J2,O) sq(I1,J3,N2) sq(I1,J4,R) G) = false 
        if result(N1,O,N2) =/= R and ( (O == "-" and N1 > R ) or (O == "+" and N1 < R and N2 < R) or (O == "*" and N1 < R and N2 < R)  )  .

   
    --- Ritorna true se una delle due colonne porta ad un risultato
    ceq isResult(sq(I1,J1,N1) sq(I2,J1,O) sq(I3,J1,N3) sq(I4,J1,R)  G) = false 
        if result(N1,O,N3) =/= R and  ( (O == "-" and N1 > R ) or (O == "+" and N1 < R and N3 < R) or (O == "*" and N1 < R and N3 < R)  )   .

    

    eq isResult(G) = true [owise] .
    
    
    ***Initial configuration of the Grid

    eq initial = sq(1,1,0) sq(1,2,"*") sq(1,3,0) sq(1,4,16)
                 sq(2,1,"-") sq(2,2,empty) sq(2,3,"+") sq(2,4,empty)
                 sq(3,1,0) sq(3,2,"*") sq(3,3,0) sq(3,4,5)
                 sq(4,1,3) sq(4,2,empty) sq(4,3,9) sq(4,4,empty)
                 .     


  
                
endfm

mod GRID-LAWS is
protecting GRID .

    
*** Coordinates
    vars I1 I2 I3 I4 J1 J2 J3 J4 : Nat . 
     *** I numeri possibili che si possono inserire. Sono tanti quante le celle "scrivibili".
    vars N1 N2 N3 N4 : NumberToinsert .

    var G : Grid .
    *** I risultati corrispondenti alle righe 1-3 ed alle colonne 1-3.
    var R R2 : Nat . 
    var O O2 : String . *** Gli operatori

  crl [write-row] : sq(I1,1,N1) sq(I1,2,O) sq(I1,3,N2) sq(I1,4,R)  =>
                 sq(I1,1,write(N1)) sq(I1,2,O) sq(I1,3,N2) sq(I1,4,R) 
                 if write(N1) =/= 0
                  .
    crl [write-row2] : sq(I1,1,N1) sq(I1,2,O) sq(I1,3,N2) sq(I1,4,R)  =>
                 sq(I1,1,N1) sq(I1,2,O) sq(I1,3,write(N2)) sq(I1,4,R) 
                 if write(N2) =/= 0
                  .              
    crl [write-column] : sq(1,J1,N1) sq(2,J1,O) sq(3,J1,N2) sq(4,J1,R)  =>
                 sq(1,J1,write(N1)) sq(2,J1,O) sq(3,J1,N2) sq(4,J1,R) 
                 if write(N1) == 0 
                  .
    crl [write-column2] : sq(1,J1,N1) sq(2,J1,O) sq(3,J1,N2) sq(4,J1,R)  =>
                 sq(1,J1,N1) sq(2,J1,O) sq(3,J1,write(N2)) sq(4,J1,R) 
                 if write(N2) =/= 0 .

                                     
---crl [write-column] : sq(1,J1,N1) sq(2,J1,O) sq(3,J1,N2) sq(4,J1,R) =>
---                    sq(1,J1,write(N1)) sq(2,J1,O) sq(3,J1,write(N2)) sq(4,J1,R) 
---                    if s(N1) =/= empty /\ s(N2) =/= empty     
---                     .

--- [TESTS]
--- red isResult(sq(1,1,8) sq(1,2,"*") sq(1,3,9) sq(1,4,72) G) .
--- red isValid(sq(I,J,write(empty)) sq(I,J,1) G) .  
--- red isValid(sq(1,1,3) sq(1,3,2) G) .             
--- red isValid(initial) .
--- red isResult(initial) .
--- show search graph .
--- show path 30 .
--- search initial =>* G:Grid such that isValid(G:Grid) .                                         
--- search initial =>* G:Grid such that isResult(G:Grid) .   
--- search initial =>* G:Grid such that isValid(G:Grid) and isResult(G:Grid) .       
--- rew [1] initial . 
    
endm

   

